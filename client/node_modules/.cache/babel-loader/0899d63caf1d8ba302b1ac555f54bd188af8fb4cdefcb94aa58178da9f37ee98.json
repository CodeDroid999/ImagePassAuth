{"ast":null,"code":"import assertString from './util/assertString';\nimport merge from './util/merge';\nvar lat = /^\\(?[+-]?(90(\\.0+)?|[1-8]?\\d(\\.\\d+)?)$/;\nvar _long = /^\\s?[+-]?(180(\\.0+)?|1[0-7]\\d(\\.\\d+)?|\\d{1,2}(\\.\\d+)?)\\)?$/;\nvar latDMS = /^(([1-8]?\\d)\\D+([1-5]?\\d|60)\\D+([1-5]?\\d|60)(\\.\\d+)?|90\\D+0\\D+0)\\D+[NSns]?$/i;\nvar longDMS = /^\\s*([1-7]?\\d{1,2}\\D+([1-5]?\\d|60)\\D+([1-5]?\\d|60)(\\.\\d+)?|180\\D+0\\D+0)\\D+[EWew]?$/i;\nvar defaultLatLongOptions = {\n  checkDMS: false\n};\nexport default function isLatLong(str, options) {\n  assertString(str);\n  options = merge(options, defaultLatLongOptions);\n  if (!str.includes(',')) return false;\n  var pair = str.split(',');\n  if (pair[0].startsWith('(') && !pair[1].endsWith(')') || pair[1].endsWith(')') && !pair[0].startsWith('(')) return false;\n  if (options.checkDMS) {\n    return latDMS.test(pair[0]) && longDMS.test(pair[1]);\n  }\n  return lat.test(pair[0]) && _long.test(pair[1]);\n}","map":{"version":3,"names":["assertString","merge","lat","_long","latDMS","longDMS","defaultLatLongOptions","checkDMS","isLatLong","str","options","includes","pair","split","startsWith","endsWith","test"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/validator/es/lib/isLatLong.js"],"sourcesContent":["import assertString from './util/assertString';\nimport merge from './util/merge';\nvar lat = /^\\(?[+-]?(90(\\.0+)?|[1-8]?\\d(\\.\\d+)?)$/;\nvar _long = /^\\s?[+-]?(180(\\.0+)?|1[0-7]\\d(\\.\\d+)?|\\d{1,2}(\\.\\d+)?)\\)?$/;\nvar latDMS = /^(([1-8]?\\d)\\D+([1-5]?\\d|60)\\D+([1-5]?\\d|60)(\\.\\d+)?|90\\D+0\\D+0)\\D+[NSns]?$/i;\nvar longDMS = /^\\s*([1-7]?\\d{1,2}\\D+([1-5]?\\d|60)\\D+([1-5]?\\d|60)(\\.\\d+)?|180\\D+0\\D+0)\\D+[EWew]?$/i;\nvar defaultLatLongOptions = {\n  checkDMS: false\n};\nexport default function isLatLong(str, options) {\n  assertString(str);\n  options = merge(options, defaultLatLongOptions);\n  if (!str.includes(',')) return false;\n  var pair = str.split(',');\n  if (pair[0].startsWith('(') && !pair[1].endsWith(')') || pair[1].endsWith(')') && !pair[0].startsWith('(')) return false;\n\n  if (options.checkDMS) {\n    return latDMS.test(pair[0]) && longDMS.test(pair[1]);\n  }\n\n  return lat.test(pair[0]) && _long.test(pair[1]);\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,KAAK,MAAM,cAAc;AAChC,IAAIC,GAAG,GAAG,wCAAwC;AAClD,IAAIC,KAAK,GAAG,4DAA4D;AACxE,IAAIC,MAAM,GAAG,8EAA8E;AAC3F,IAAIC,OAAO,GAAG,qFAAqF;AACnG,IAAIC,qBAAqB,GAAG;EAC1BC,QAAQ,EAAE;AACZ,CAAC;AACD,eAAe,SAASC,SAAS,CAACC,GAAG,EAAEC,OAAO,EAAE;EAC9CV,YAAY,CAACS,GAAG,CAAC;EACjBC,OAAO,GAAGT,KAAK,CAACS,OAAO,EAAEJ,qBAAqB,CAAC;EAC/C,IAAI,CAACG,GAAG,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE,OAAO,KAAK;EACpC,IAAIC,IAAI,GAAGH,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC;EACzB,IAAID,IAAI,CAAC,CAAC,CAAC,CAACE,UAAU,CAAC,GAAG,CAAC,IAAI,CAACF,IAAI,CAAC,CAAC,CAAC,CAACG,QAAQ,CAAC,GAAG,CAAC,IAAIH,IAAI,CAAC,CAAC,CAAC,CAACG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAACH,IAAI,CAAC,CAAC,CAAC,CAACE,UAAU,CAAC,GAAG,CAAC,EAAE,OAAO,KAAK;EAExH,IAAIJ,OAAO,CAACH,QAAQ,EAAE;IACpB,OAAOH,MAAM,CAACY,IAAI,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC,IAAIP,OAAO,CAACW,IAAI,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC;EACtD;EAEA,OAAOV,GAAG,CAACc,IAAI,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC,IAAIT,KAAK,CAACa,IAAI,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC;AACjD"},"metadata":{},"sourceType":"module","externalDependencies":[]}