{"ast":null,"code":"/**\n * The most commonly used EAN standard is\n * the thirteen-digit EAN-13, while the\n * less commonly used 8-digit EAN-8 barcode was\n * introduced for use on small packages.\n * Also EAN/UCC-14 is used for Grouping of individual\n * trade items above unit level(Intermediate, Carton or Pallet).\n * For more info about EAN-14 checkout: https://www.gtin.info/itf-14-barcodes/\n * EAN consists of:\n * GS1 prefix, manufacturer code, product code and check digit\n * Reference: https://en.wikipedia.org/wiki/International_Article_Number\n * Reference: https://www.gtin.info/\n */\nimport assertString from './util/assertString';\n/**\n * Define EAN Lenghts; 8 for EAN-8; 13 for EAN-13; 14 for EAN-14\n * and Regular Expression for valid EANs (EAN-8, EAN-13, EAN-14),\n * with exact numberic matching of 8 or 13 or 14 digits [0-9]\n */\n\nvar LENGTH_EAN_8 = 8;\nvar LENGTH_EAN_14 = 14;\nvar validEanRegex = /^(\\d{8}|\\d{13}|\\d{14})$/;\n/**\n * Get position weight given:\n * EAN length and digit index/position\n *\n * @param {number} length\n * @param {number} index\n * @return {number}\n */\n\nfunction getPositionWeightThroughLengthAndIndex(length, index) {\n  if (length === LENGTH_EAN_8 || length === LENGTH_EAN_14) {\n    return index % 2 === 0 ? 3 : 1;\n  }\n  return index % 2 === 0 ? 1 : 3;\n}\n/**\n * Calculate EAN Check Digit\n * Reference: https://en.wikipedia.org/wiki/International_Article_Number#Calculation_of_checksum_digit\n *\n * @param {string} ean\n * @return {number}\n */\n\nfunction calculateCheckDigit(ean) {\n  var checksum = ean.slice(0, -1).split('').map(function (_char, index) {\n    return Number(_char) * getPositionWeightThroughLengthAndIndex(ean.length, index);\n  }).reduce(function (acc, partialSum) {\n    return acc + partialSum;\n  }, 0);\n  var remainder = 10 - checksum % 10;\n  return remainder < 10 ? remainder : 0;\n}\n/**\n * Check if string is valid EAN:\n * Matches EAN-8/EAN-13/EAN-14 regex\n * Has valid check digit.\n *\n * @param {string} str\n * @return {boolean}\n */\n\nexport default function isEAN(str) {\n  assertString(str);\n  var actualCheckDigit = Number(str.slice(-1));\n  return validEanRegex.test(str) && actualCheckDigit === calculateCheckDigit(str);\n}","map":{"version":3,"names":["assertString","LENGTH_EAN_8","LENGTH_EAN_14","validEanRegex","getPositionWeightThroughLengthAndIndex","length","index","calculateCheckDigit","ean","checksum","slice","split","map","_char","Number","reduce","acc","partialSum","remainder","isEAN","str","actualCheckDigit","test"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/validator/es/lib/isEAN.js"],"sourcesContent":["/**\n * The most commonly used EAN standard is\n * the thirteen-digit EAN-13, while the\n * less commonly used 8-digit EAN-8 barcode was\n * introduced for use on small packages.\n * Also EAN/UCC-14 is used for Grouping of individual\n * trade items above unit level(Intermediate, Carton or Pallet).\n * For more info about EAN-14 checkout: https://www.gtin.info/itf-14-barcodes/\n * EAN consists of:\n * GS1 prefix, manufacturer code, product code and check digit\n * Reference: https://en.wikipedia.org/wiki/International_Article_Number\n * Reference: https://www.gtin.info/\n */\nimport assertString from './util/assertString';\n/**\n * Define EAN Lenghts; 8 for EAN-8; 13 for EAN-13; 14 for EAN-14\n * and Regular Expression for valid EANs (EAN-8, EAN-13, EAN-14),\n * with exact numberic matching of 8 or 13 or 14 digits [0-9]\n */\n\nvar LENGTH_EAN_8 = 8;\nvar LENGTH_EAN_14 = 14;\nvar validEanRegex = /^(\\d{8}|\\d{13}|\\d{14})$/;\n/**\n * Get position weight given:\n * EAN length and digit index/position\n *\n * @param {number} length\n * @param {number} index\n * @return {number}\n */\n\nfunction getPositionWeightThroughLengthAndIndex(length, index) {\n  if (length === LENGTH_EAN_8 || length === LENGTH_EAN_14) {\n    return index % 2 === 0 ? 3 : 1;\n  }\n\n  return index % 2 === 0 ? 1 : 3;\n}\n/**\n * Calculate EAN Check Digit\n * Reference: https://en.wikipedia.org/wiki/International_Article_Number#Calculation_of_checksum_digit\n *\n * @param {string} ean\n * @return {number}\n */\n\n\nfunction calculateCheckDigit(ean) {\n  var checksum = ean.slice(0, -1).split('').map(function (_char, index) {\n    return Number(_char) * getPositionWeightThroughLengthAndIndex(ean.length, index);\n  }).reduce(function (acc, partialSum) {\n    return acc + partialSum;\n  }, 0);\n  var remainder = 10 - checksum % 10;\n  return remainder < 10 ? remainder : 0;\n}\n/**\n * Check if string is valid EAN:\n * Matches EAN-8/EAN-13/EAN-14 regex\n * Has valid check digit.\n *\n * @param {string} str\n * @return {boolean}\n */\n\n\nexport default function isEAN(str) {\n  assertString(str);\n  var actualCheckDigit = Number(str.slice(-1));\n  return validEanRegex.test(str) && actualCheckDigit === calculateCheckDigit(str);\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,YAAY,MAAM,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;;AAEA,IAAIC,YAAY,GAAG,CAAC;AACpB,IAAIC,aAAa,GAAG,EAAE;AACtB,IAAIC,aAAa,GAAG,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,sCAAsC,CAACC,MAAM,EAAEC,KAAK,EAAE;EAC7D,IAAID,MAAM,KAAKJ,YAAY,IAAII,MAAM,KAAKH,aAAa,EAAE;IACvD,OAAOI,KAAK,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;EAChC;EAEA,OAAOA,KAAK,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,mBAAmB,CAACC,GAAG,EAAE;EAChC,IAAIC,QAAQ,GAAGD,GAAG,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,UAAUC,KAAK,EAAEP,KAAK,EAAE;IACpE,OAAOQ,MAAM,CAACD,KAAK,CAAC,GAAGT,sCAAsC,CAACI,GAAG,CAACH,MAAM,EAAEC,KAAK,CAAC;EAClF,CAAC,CAAC,CAACS,MAAM,CAAC,UAAUC,GAAG,EAAEC,UAAU,EAAE;IACnC,OAAOD,GAAG,GAAGC,UAAU;EACzB,CAAC,EAAE,CAAC,CAAC;EACL,IAAIC,SAAS,GAAG,EAAE,GAAGT,QAAQ,GAAG,EAAE;EAClC,OAAOS,SAAS,GAAG,EAAE,GAAGA,SAAS,GAAG,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAe,SAASC,KAAK,CAACC,GAAG,EAAE;EACjCpB,YAAY,CAACoB,GAAG,CAAC;EACjB,IAAIC,gBAAgB,GAAGP,MAAM,CAACM,GAAG,CAACV,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5C,OAAOP,aAAa,CAACmB,IAAI,CAACF,GAAG,CAAC,IAAIC,gBAAgB,KAAKd,mBAAmB,CAACa,GAAG,CAAC;AACjF"},"metadata":{},"sourceType":"module","externalDependencies":[]}