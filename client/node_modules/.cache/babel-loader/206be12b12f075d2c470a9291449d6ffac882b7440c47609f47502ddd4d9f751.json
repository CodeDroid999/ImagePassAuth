{"ast":null,"code":"\"use client\";\n\n// src/react.tsx\nimport { useEffect } from \"react\";\n\n// package.json\nvar name = \"@vercel/analytics\";\nvar version = \"0.1.11\";\n\n// src/queue.ts\nvar initQueue = () => {\n  if (window.va) return;\n  window.va = function a() {\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n    (window.vaq = window.vaq || []).push(params);\n  };\n};\n\n// src/utils.ts\nfunction isBrowser() {\n  return typeof window !== \"undefined\";\n}\nfunction isDevelopment() {\n  try {\n    const env = process.env.NODE_ENV;\n    return env === \"development\" || env === \"test\";\n  } catch (e) {\n    return false;\n  }\n}\nfunction getMode() {\n  let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"auto\";\n  if (mode === \"auto\") {\n    return isDevelopment() ? \"development\" : \"production\";\n  }\n  return mode;\n}\n\n// src/generic.ts\nvar inject = function () {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    debug: true\n  };\n  var _a;\n  if (!isBrowser()) return;\n  const mode = getMode(props.mode);\n  initQueue();\n  if (props.beforeSend) {\n    (_a = window.va) == null ? void 0 : _a.call(window, \"beforeSend\", props.beforeSend);\n  }\n  const src = mode === \"development\" ? \"https://cdn.vercel-insights.com/v1/script.debug.js\" : \"/_vercel/insights/script.js\";\n  if (document.head.querySelector(`script[src*=\"${src}\"]`)) return;\n  const script = document.createElement(\"script\");\n  script.src = src;\n  script.defer = true;\n  script.setAttribute(\"data-sdkn\", name);\n  script.setAttribute(\"data-sdkv\", version);\n  if (mode === \"development\" && props.debug === false) {\n    script.setAttribute(\"data-debug\", \"false\");\n  }\n  document.head.appendChild(script);\n};\n\n// src/react.tsx\nfunction Analytics(_ref) {\n  let {\n    beforeSend,\n    debug = true,\n    mode = \"auto\"\n  } = _ref;\n  useEffect(() => {\n    inject({\n      beforeSend,\n      debug,\n      mode\n    });\n  }, [beforeSend, debug, mode]);\n  return null;\n}\nexport { Analytics };","map":{"version":3,"mappings":";;;AAAA,SAASA,iBAAiB;;;;;;;ACAnB,IAAMC,YAAY,MAAY;EAEnC,IAAIC,OAAOC,IAAI;EAEfD,OAAOC,KAAK,SAASC,IAAmB;IAAA,kCAAdC;MAAAA;IAAA;IACxB,CAACH,OAAOI,MAAMJ,OAAOI,OAAO,EAAC,EAAGC,KAAKF,MAAM;EAC7C;AACF;;;ACLO,SAASG,YAAqB;EACnC,OAAO,OAAON,WAAW;AAC3B;AAEO,SAASO,gBAAyB;EACvC,IAAI;IACF,MAAMC,MAAMC,QAAQD,IAAIE;IACxB,OAAOF,QAAQ,iBAAiBA,QAAQ;EAC1C,SAASG,GAAP;IACA,OAAO;EACT;AACF;AAEO,SAASC,UAAmC;EAAA,IAA3BC,2EAAa;EACnC,IAAIA,SAAS,QAAQ;IACnB,OAAON,eAAc,GAAI,gBAAgB;EAC3C;EAEA,OAAOM;AACT;;;AChBO,IAAMC,SAAS,YAIX;EAAA,IAHTC,4EAAwB;IACtBC,OAAO;EACT;EARF;EAUE,IAAI,CAACV,WAAU,EAAG;EAElB,MAAMO,OAAOD,QAAQG,MAAMF,IAAI;EAE/Bd,WAAU;EAEV,IAAIgB,MAAME,YAAY;IACpB,aAAOhB,OAAP,gCAAY,cAAcc,MAAME;EAClC;EAEA,MAAMC,MACJL,SAAS,gBACL,uDACA;EAEN,IAAIM,SAASC,KAAKC,cAAc,gBAAgBH,OAAO,GAAG;EAE1D,MAAMI,SAASH,SAASI,cAAc,QAAQ;EAC9CD,OAAOJ,MAAMA;EACbI,OAAOE,QAAQ;EACfF,OAAOG,aAAa,aAAaC,IAAI;EACrCJ,OAAOG,aAAa,aAAaE,OAAO;EAExC,IAAId,SAAS,iBAAiBE,MAAMC,UAAU,OAAO;IACnDM,OAAOG,aAAa,cAAc,OAAO;EAC3C;EAEAN,SAASC,KAAKQ,YAAYN,MAAM;AAClC;;;AHhCO,SAASO,gBAIS;EAAA,IAJC;IACxBZ;IACAD,QAAQ;IACRH,OAAO;EACT;EACEf,UAAU,MAAM;IACdgB,OAAO;MAAEG;MAAYD;MAAOH;IAAK,CAAC;EACpC,GAAG,CAACI,YAAYD,OAAOH,IAAI,CAAC;EAE5B,OAAO;AACT","names":["useEffect","initQueue","window","va","a","params","vaq","push","isBrowser","isDevelopment","env","process","NODE_ENV","e","getMode","mode","inject","props","debug","beforeSend","src","document","head","querySelector","script","createElement","defer","setAttribute","name","version","appendChild","Analytics"],"sources":["C:\\Users\\hp\\Pictures\\ImagePassAuth\\client\\node_modules\\@vercel\\analytics\\src\\react.tsx","C:\\Users\\hp\\Pictures\\ImagePassAuth\\client\\node_modules\\@vercel\\analytics\\src\\queue.ts","C:\\Users\\hp\\Pictures\\ImagePassAuth\\client\\node_modules\\@vercel\\analytics\\src\\utils.ts","C:\\Users\\hp\\Pictures\\ImagePassAuth\\client\\node_modules\\@vercel\\analytics\\src\\generic.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport { inject } from './generic';\nimport type { AnalyticsProps } from './types';\n\nexport type { AnalyticsProps } from './types';\n\nexport function Analytics({\n  beforeSend,\n  debug = true,\n  mode = 'auto',\n}: AnalyticsProps): null {\n  useEffect(() => {\n    inject({ beforeSend, debug, mode });\n  }, [beforeSend, debug, mode]);\n\n  return null;\n}\n","export const initQueue = (): void => {\n  // initialize va until script is loaded\n  if (window.va) return;\n\n  window.va = function a(...params): void {\n    (window.vaq = window.vaq || []).push(params);\n  };\n};\n","import type { Mode } from './types';\n\nexport function isBrowser(): boolean {\n  return typeof window !== 'undefined';\n}\n\nexport function isDevelopment(): boolean {\n  try {\n    const env = process.env.NODE_ENV;\n    return env === 'development' || env === 'test';\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function getMode(mode: Mode = 'auto'): Mode {\n  if (mode === 'auto') {\n    return isDevelopment() ? 'development' : 'production';\n  }\n\n  return mode;\n}\n","import { name, version } from '../package.json';\nimport { initQueue } from './queue';\nimport type { AnalyticsProps } from './types';\nimport { isBrowser, getMode } from './utils';\n\nexport const inject = (\n  props: AnalyticsProps = {\n    debug: true,\n  },\n): void => {\n  if (!isBrowser()) return;\n\n  const mode = getMode(props.mode);\n\n  initQueue();\n\n  if (props.beforeSend) {\n    window.va?.('beforeSend', props.beforeSend);\n  }\n\n  const src =\n    mode === 'development'\n      ? 'https://cdn.vercel-insights.com/v1/script.debug.js'\n      : '/_vercel/insights/script.js';\n\n  if (document.head.querySelector(`script[src*=\"${src}\"]`)) return;\n\n  const script = document.createElement('script');\n  script.src = src;\n  script.defer = true;\n  script.setAttribute('data-sdkn', name);\n  script.setAttribute('data-sdkv', version);\n\n  if (mode === 'development' && props.debug === false) {\n    script.setAttribute('data-debug', 'false');\n  }\n\n  document.head.appendChild(script);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}