{"ast":null,"code":"import assertString from './util/assertString';\n/* eslint-disable max-len */\n\nvar creditCard = /^(?:4[0-9]{12}(?:[0-9]{3,6})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12,15}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|6[27][0-9]{14}|^(81[0-9]{14,17}))$/;\n/* eslint-enable max-len */\n\nexport default function isCreditCard(str) {\n  assertString(str);\n  var sanitized = str.replace(/[- ]+/g, '');\n  if (!creditCard.test(sanitized)) {\n    return false;\n  }\n  var sum = 0;\n  var digit;\n  var tmpNum;\n  var shouldDouble;\n  for (var i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n    if (shouldDouble) {\n      tmpNum *= 2;\n      if (tmpNum >= 10) {\n        sum += tmpNum % 10 + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n    shouldDouble = !shouldDouble;\n  }\n  return !!(sum % 10 === 0 ? sanitized : false);\n}","map":{"version":3,"names":["assertString","creditCard","isCreditCard","str","sanitized","replace","test","sum","digit","tmpNum","shouldDouble","i","length","substring","parseInt"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/validator/es/lib/isCreditCard.js"],"sourcesContent":["import assertString from './util/assertString';\n/* eslint-disable max-len */\n\nvar creditCard = /^(?:4[0-9]{12}(?:[0-9]{3,6})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12,15}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|6[27][0-9]{14}|^(81[0-9]{14,17}))$/;\n/* eslint-enable max-len */\n\nexport default function isCreditCard(str) {\n  assertString(str);\n  var sanitized = str.replace(/[- ]+/g, '');\n\n  if (!creditCard.test(sanitized)) {\n    return false;\n  }\n\n  var sum = 0;\n  var digit;\n  var tmpNum;\n  var shouldDouble;\n\n  for (var i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n\n    if (shouldDouble) {\n      tmpNum *= 2;\n\n      if (tmpNum >= 10) {\n        sum += tmpNum % 10 + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n\n    shouldDouble = !shouldDouble;\n  }\n\n  return !!(sum % 10 === 0 ? sanitized : false);\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,qBAAqB;AAC9C;;AAEA,IAAIC,UAAU,GAAG,8PAA8P;AAC/Q;;AAEA,eAAe,SAASC,YAAY,CAACC,GAAG,EAAE;EACxCH,YAAY,CAACG,GAAG,CAAC;EACjB,IAAIC,SAAS,GAAGD,GAAG,CAACE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EAEzC,IAAI,CAACJ,UAAU,CAACK,IAAI,CAACF,SAAS,CAAC,EAAE;IAC/B,OAAO,KAAK;EACd;EAEA,IAAIG,GAAG,GAAG,CAAC;EACX,IAAIC,KAAK;EACT,IAAIC,MAAM;EACV,IAAIC,YAAY;EAEhB,KAAK,IAAIC,CAAC,GAAGP,SAAS,CAACQ,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC9CH,KAAK,GAAGJ,SAAS,CAACS,SAAS,CAACF,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;IACrCF,MAAM,GAAGK,QAAQ,CAACN,KAAK,EAAE,EAAE,CAAC;IAE5B,IAAIE,YAAY,EAAE;MAChBD,MAAM,IAAI,CAAC;MAEX,IAAIA,MAAM,IAAI,EAAE,EAAE;QAChBF,GAAG,IAAIE,MAAM,GAAG,EAAE,GAAG,CAAC;MACxB,CAAC,MAAM;QACLF,GAAG,IAAIE,MAAM;MACf;IACF,CAAC,MAAM;MACLF,GAAG,IAAIE,MAAM;IACf;IAEAC,YAAY,GAAG,CAACA,YAAY;EAC9B;EAEA,OAAO,CAAC,EAAEH,GAAG,GAAG,EAAE,KAAK,CAAC,GAAGH,SAAS,GAAG,KAAK,CAAC;AAC/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}