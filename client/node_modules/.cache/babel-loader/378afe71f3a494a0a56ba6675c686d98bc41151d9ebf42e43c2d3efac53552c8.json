{"ast":null,"code":"import assertString from './util/assertString';\nimport { alpha } from './alpha';\nexport default function isAlpha(_str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  assertString(_str);\n  var str = _str;\n  var ignore = options.ignore;\n  if (ignore) {\n    if (ignore instanceof RegExp) {\n      str = str.replace(ignore, '');\n    } else if (typeof ignore === 'string') {\n      str = str.replace(new RegExp(\"[\".concat(ignore.replace(/[-[\\]{}()*+?.,\\\\^$|#\\\\s]/g, '\\\\$&'), \"]\"), 'g'), ''); // escape regex for ignore\n    } else {\n      throw new Error('ignore should be instance of a String or RegExp');\n    }\n  }\n  if (locale in alpha) {\n    return alpha[locale].test(str);\n  }\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nexport var locales = Object.keys(alpha);","map":{"version":3,"names":["assertString","alpha","isAlpha","_str","locale","arguments","length","undefined","options","str","ignore","RegExp","replace","concat","Error","test","locales","Object","keys"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/validator/es/lib/isAlpha.js"],"sourcesContent":["import assertString from './util/assertString';\nimport { alpha } from './alpha';\nexport default function isAlpha(_str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  assertString(_str);\n  var str = _str;\n  var ignore = options.ignore;\n\n  if (ignore) {\n    if (ignore instanceof RegExp) {\n      str = str.replace(ignore, '');\n    } else if (typeof ignore === 'string') {\n      str = str.replace(new RegExp(\"[\".concat(ignore.replace(/[-[\\]{}()*+?.,\\\\^$|#\\\\s]/g, '\\\\$&'), \"]\"), 'g'), ''); // escape regex for ignore\n    } else {\n      throw new Error('ignore should be instance of a String or RegExp');\n    }\n  }\n\n  if (locale in alpha) {\n    return alpha[locale].test(str);\n  }\n\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nexport var locales = Object.keys(alpha);"],"mappings":"AAAA,OAAOA,YAAY,MAAM,qBAAqB;AAC9C,SAASC,KAAK,QAAQ,SAAS;AAC/B,eAAe,SAASC,OAAO,CAACC,IAAI,EAAE;EACpC,IAAIC,MAAM,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,OAAO;EACxF,IAAIG,OAAO,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACpFL,YAAY,CAACG,IAAI,CAAC;EAClB,IAAIM,GAAG,GAAGN,IAAI;EACd,IAAIO,MAAM,GAAGF,OAAO,CAACE,MAAM;EAE3B,IAAIA,MAAM,EAAE;IACV,IAAIA,MAAM,YAAYC,MAAM,EAAE;MAC5BF,GAAG,GAAGA,GAAG,CAACG,OAAO,CAACF,MAAM,EAAE,EAAE,CAAC;IAC/B,CAAC,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MACrCD,GAAG,GAAGA,GAAG,CAACG,OAAO,CAAC,IAAID,MAAM,CAAC,GAAG,CAACE,MAAM,CAACH,MAAM,CAACE,OAAO,CAAC,2BAA2B,EAAE,MAAM,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAChH,CAAC,MAAM;MACL,MAAM,IAAIE,KAAK,CAAC,iDAAiD,CAAC;IACpE;EACF;EAEA,IAAIV,MAAM,IAAIH,KAAK,EAAE;IACnB,OAAOA,KAAK,CAACG,MAAM,CAAC,CAACW,IAAI,CAACN,GAAG,CAAC;EAChC;EAEA,MAAM,IAAIK,KAAK,CAAC,kBAAkB,CAACD,MAAM,CAACT,MAAM,EAAE,GAAG,CAAC,CAAC;AACzD;AACA,OAAO,IAAIY,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACjB,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}