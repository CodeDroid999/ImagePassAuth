{"ast":null,"code":"import merge from './util/merge';\nimport assertString from './util/assertString';\nfunction currencyRegex(options) {\n  var decimal_digits = \"\\\\d{\".concat(options.digits_after_decimal[0], \"}\");\n  options.digits_after_decimal.forEach(function (digit, index) {\n    if (index !== 0) decimal_digits = \"\".concat(decimal_digits, \"|\\\\d{\").concat(digit, \"}\");\n  });\n  var symbol = \"(\".concat(options.symbol.replace(/\\W/, function (m) {\n      return \"\\\\\".concat(m);\n    }), \")\").concat(options.require_symbol ? '' : '?'),\n    negative = '-?',\n    whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n    whole_dollar_amount_with_sep = \"[1-9]\\\\d{0,2}(\\\\\".concat(options.thousands_separator, \"\\\\d{3})*\"),\n    valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n    whole_dollar_amount = \"(\".concat(valid_whole_dollar_amounts.join('|'), \")?\"),\n    decimal_amount = \"(\\\\\".concat(options.decimal_separator, \"(\").concat(decimal_digits, \"))\").concat(options.require_decimal ? '' : '?');\n  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : ''); // default is negative sign before symbol, but there are two other options (besides parens)\n\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  } // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n\n  if (options.allow_negative_sign_placeholder) {\n    pattern = \"( (?!\\\\-))?\".concat(pattern);\n  } else if (options.allow_space_after_symbol) {\n    pattern = \" ?\".concat(pattern);\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = \"(\\\\(\".concat(pattern, \"\\\\)|\").concat(pattern, \")\");\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  } // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n\n  return new RegExp(\"^(?!-? )(?=.*\\\\d)\".concat(pattern, \"$\"));\n}\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false\n};\nexport default function isCurrency(str, options) {\n  assertString(str);\n  options = merge(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}","map":{"version":3,"names":["merge","assertString","currencyRegex","options","decimal_digits","concat","digits_after_decimal","forEach","digit","index","symbol","replace","m","require_symbol","negative","whole_dollar_amount_without_sep","whole_dollar_amount_with_sep","thousands_separator","valid_whole_dollar_amounts","whole_dollar_amount","join","decimal_amount","decimal_separator","require_decimal","pattern","allow_decimal","allow_negatives","parens_for_negatives","negative_sign_after_digits","negative_sign_before_digits","allow_negative_sign_placeholder","allow_space_after_symbol","allow_space_after_digits","symbol_after_digits","RegExp","default_currency_options","isCurrency","str","test"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/validator/es/lib/isCurrency.js"],"sourcesContent":["import merge from './util/merge';\nimport assertString from './util/assertString';\n\nfunction currencyRegex(options) {\n  var decimal_digits = \"\\\\d{\".concat(options.digits_after_decimal[0], \"}\");\n  options.digits_after_decimal.forEach(function (digit, index) {\n    if (index !== 0) decimal_digits = \"\".concat(decimal_digits, \"|\\\\d{\").concat(digit, \"}\");\n  });\n  var symbol = \"(\".concat(options.symbol.replace(/\\W/, function (m) {\n    return \"\\\\\".concat(m);\n  }), \")\").concat(options.require_symbol ? '' : '?'),\n      negative = '-?',\n      whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n      whole_dollar_amount_with_sep = \"[1-9]\\\\d{0,2}(\\\\\".concat(options.thousands_separator, \"\\\\d{3})*\"),\n      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n      whole_dollar_amount = \"(\".concat(valid_whole_dollar_amounts.join('|'), \")?\"),\n      decimal_amount = \"(\\\\\".concat(options.decimal_separator, \"(\").concat(decimal_digits, \"))\").concat(options.require_decimal ? '' : '?');\n  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : ''); // default is negative sign before symbol, but there are two other options (besides parens)\n\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  } // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n\n\n  if (options.allow_negative_sign_placeholder) {\n    pattern = \"( (?!\\\\-))?\".concat(pattern);\n  } else if (options.allow_space_after_symbol) {\n    pattern = \" ?\".concat(pattern);\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = \"(\\\\(\".concat(pattern, \"\\\\)|\").concat(pattern, \")\");\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  } // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n\n\n  return new RegExp(\"^(?!-? )(?=.*\\\\d)\".concat(pattern, \"$\"));\n}\n\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false\n};\nexport default function isCurrency(str, options) {\n  assertString(str);\n  options = merge(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}