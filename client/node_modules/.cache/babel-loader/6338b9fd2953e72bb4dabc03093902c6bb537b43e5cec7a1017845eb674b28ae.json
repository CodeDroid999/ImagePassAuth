{"ast":null,"code":"import assertString from './util/assertString';\nvar validMediaType = /^[a-z]+\\/[a-z0-9\\-\\+]+$/i;\nvar validAttribute = /^[a-z\\-]+=[a-z0-9\\-]+$/i;\nvar validData = /^[a-z0-9!\\$&'\\(\\)\\*\\+,;=\\-\\._~:@\\/\\?%\\s]*$/i;\nexport default function isDataURI(str) {\n  assertString(str);\n  var data = str.split(',');\n  if (data.length < 2) {\n    return false;\n  }\n  var attributes = data.shift().trim().split(';');\n  var schemeAndMediaType = attributes.shift();\n  if (schemeAndMediaType.substr(0, 5) !== 'data:') {\n    return false;\n  }\n  var mediaType = schemeAndMediaType.substr(5);\n  if (mediaType !== '' && !validMediaType.test(mediaType)) {\n    return false;\n  }\n  for (var i = 0; i < attributes.length; i++) {\n    if (!(i === attributes.length - 1 && attributes[i].toLowerCase() === 'base64') && !validAttribute.test(attributes[i])) {\n      return false;\n    }\n  }\n  for (var _i = 0; _i < data.length; _i++) {\n    if (!validData.test(data[_i])) {\n      return false;\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["assertString","validMediaType","validAttribute","validData","isDataURI","str","data","split","length","attributes","shift","trim","schemeAndMediaType","substr","mediaType","test","i","toLowerCase","_i"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/validator/es/lib/isDataURI.js"],"sourcesContent":["import assertString from './util/assertString';\nvar validMediaType = /^[a-z]+\\/[a-z0-9\\-\\+]+$/i;\nvar validAttribute = /^[a-z\\-]+=[a-z0-9\\-]+$/i;\nvar validData = /^[a-z0-9!\\$&'\\(\\)\\*\\+,;=\\-\\._~:@\\/\\?%\\s]*$/i;\nexport default function isDataURI(str) {\n  assertString(str);\n  var data = str.split(',');\n\n  if (data.length < 2) {\n    return false;\n  }\n\n  var attributes = data.shift().trim().split(';');\n  var schemeAndMediaType = attributes.shift();\n\n  if (schemeAndMediaType.substr(0, 5) !== 'data:') {\n    return false;\n  }\n\n  var mediaType = schemeAndMediaType.substr(5);\n\n  if (mediaType !== '' && !validMediaType.test(mediaType)) {\n    return false;\n  }\n\n  for (var i = 0; i < attributes.length; i++) {\n    if (!(i === attributes.length - 1 && attributes[i].toLowerCase() === 'base64') && !validAttribute.test(attributes[i])) {\n      return false;\n    }\n  }\n\n  for (var _i = 0; _i < data.length; _i++) {\n    if (!validData.test(data[_i])) {\n      return false;\n    }\n  }\n\n  return true;\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,qBAAqB;AAC9C,IAAIC,cAAc,GAAG,0BAA0B;AAC/C,IAAIC,cAAc,GAAG,yBAAyB;AAC9C,IAAIC,SAAS,GAAG,6CAA6C;AAC7D,eAAe,SAASC,SAAS,CAACC,GAAG,EAAE;EACrCL,YAAY,CAACK,GAAG,CAAC;EACjB,IAAIC,IAAI,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;EAEzB,IAAID,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO,KAAK;EACd;EAEA,IAAIC,UAAU,GAAGH,IAAI,CAACI,KAAK,EAAE,CAACC,IAAI,EAAE,CAACJ,KAAK,CAAC,GAAG,CAAC;EAC/C,IAAIK,kBAAkB,GAAGH,UAAU,CAACC,KAAK,EAAE;EAE3C,IAAIE,kBAAkB,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,OAAO,EAAE;IAC/C,OAAO,KAAK;EACd;EAEA,IAAIC,SAAS,GAAGF,kBAAkB,CAACC,MAAM,CAAC,CAAC,CAAC;EAE5C,IAAIC,SAAS,KAAK,EAAE,IAAI,CAACb,cAAc,CAACc,IAAI,CAACD,SAAS,CAAC,EAAE;IACvD,OAAO,KAAK;EACd;EAEA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,UAAU,CAACD,MAAM,EAAEQ,CAAC,EAAE,EAAE;IAC1C,IAAI,EAAEA,CAAC,KAAKP,UAAU,CAACD,MAAM,GAAG,CAAC,IAAIC,UAAU,CAACO,CAAC,CAAC,CAACC,WAAW,EAAE,KAAK,QAAQ,CAAC,IAAI,CAACf,cAAc,CAACa,IAAI,CAACN,UAAU,CAACO,CAAC,CAAC,CAAC,EAAE;MACrH,OAAO,KAAK;IACd;EACF;EAEA,KAAK,IAAIE,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGZ,IAAI,CAACE,MAAM,EAAEU,EAAE,EAAE,EAAE;IACvC,IAAI,CAACf,SAAS,CAACY,IAAI,CAACT,IAAI,CAACY,EAAE,CAAC,CAAC,EAAE;MAC7B,OAAO,KAAK;IACd;EACF;EAEA,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}