{"ast":null,"code":"import assertString from './util/assertString';\n/**\n11.3.  Examples\n\n   The following addresses\n\n             fe80::1234 (on the 1st link of the node)\n             ff02::5678 (on the 5th link of the node)\n             ff08::9abc (on the 10th organization of the node)\n\n   would be represented as follows:\n\n             fe80::1234%1\n             ff02::5678%5\n             ff08::9abc%10\n\n   (Here we assume a natural translation from a zone index to the\n   <zone_id> part, where the Nth zone of any scope is translated into\n   \"N\".)\n\n   If we use interface names as <zone_id>, those addresses could also be\n   represented as follows:\n\n            fe80::1234%ne0\n            ff02::5678%pvc1.3\n            ff08::9abc%interface10\n\n   where the interface \"ne0\" belongs to the 1st link, \"pvc1.3\" belongs\n   to the 5th link, and \"interface10\" belongs to the 10th organization.\n * * */\n\nvar IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\nvar IPv4AddressFormat = \"(\".concat(IPv4SegmentFormat, \"[.]){3}\").concat(IPv4SegmentFormat);\nvar IPv4AddressRegExp = new RegExp(\"^\".concat(IPv4AddressFormat, \"$\"));\nvar IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';\nvar IPv6AddressRegExp = new RegExp('^(' + \"(?:\".concat(IPv6SegmentFormat, \":){7}(?:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){6}(?:\").concat(IPv4AddressFormat, \"|:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){5}(?::\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,2}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){4}(?:(:\").concat(IPv6SegmentFormat, \"){0,1}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,3}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){3}(?:(:\").concat(IPv6SegmentFormat, \"){0,2}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,4}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){2}(?:(:\").concat(IPv6SegmentFormat, \"){0,3}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,5}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){1}(?:(:\").concat(IPv6SegmentFormat, \"){0,4}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,6}|:)|\") + \"(?::((?::\".concat(IPv6SegmentFormat, \"){0,5}:\").concat(IPv4AddressFormat, \"|(?::\").concat(IPv6SegmentFormat, \"){1,7}|:))\") + ')(%[0-9a-zA-Z-.:]{1,})?$');\nexport default function isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  assertString(str);\n  version = String(version);\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  }\n  if (version === '4') {\n    if (!IPv4AddressRegExp.test(str)) {\n      return false;\n    }\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  }\n  if (version === '6') {\n    return !!IPv6AddressRegExp.test(str);\n  }\n  return false;\n}","map":{"version":3,"names":["assertString","IPv4SegmentFormat","IPv4AddressFormat","concat","IPv4AddressRegExp","RegExp","IPv6SegmentFormat","IPv6AddressRegExp","isIP","str","version","arguments","length","undefined","String","test","parts","split","sort","a","b"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/validator/es/lib/isIP.js"],"sourcesContent":["import assertString from './util/assertString';\n/**\n11.3.  Examples\n\n   The following addresses\n\n             fe80::1234 (on the 1st link of the node)\n             ff02::5678 (on the 5th link of the node)\n             ff08::9abc (on the 10th organization of the node)\n\n   would be represented as follows:\n\n             fe80::1234%1\n             ff02::5678%5\n             ff08::9abc%10\n\n   (Here we assume a natural translation from a zone index to the\n   <zone_id> part, where the Nth zone of any scope is translated into\n   \"N\".)\n\n   If we use interface names as <zone_id>, those addresses could also be\n   represented as follows:\n\n            fe80::1234%ne0\n            ff02::5678%pvc1.3\n            ff08::9abc%interface10\n\n   where the interface \"ne0\" belongs to the 1st link, \"pvc1.3\" belongs\n   to the 5th link, and \"interface10\" belongs to the 10th organization.\n * * */\n\nvar IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\nvar IPv4AddressFormat = \"(\".concat(IPv4SegmentFormat, \"[.]){3}\").concat(IPv4SegmentFormat);\nvar IPv4AddressRegExp = new RegExp(\"^\".concat(IPv4AddressFormat, \"$\"));\nvar IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';\nvar IPv6AddressRegExp = new RegExp('^(' + \"(?:\".concat(IPv6SegmentFormat, \":){7}(?:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){6}(?:\").concat(IPv4AddressFormat, \"|:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){5}(?::\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,2}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){4}(?:(:\").concat(IPv6SegmentFormat, \"){0,1}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,3}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){3}(?:(:\").concat(IPv6SegmentFormat, \"){0,2}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,4}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){2}(?:(:\").concat(IPv6SegmentFormat, \"){0,3}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,5}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){1}(?:(:\").concat(IPv6SegmentFormat, \"){0,4}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,6}|:)|\") + \"(?::((?::\".concat(IPv6SegmentFormat, \"){0,5}:\").concat(IPv4AddressFormat, \"|(?::\").concat(IPv6SegmentFormat, \"){1,7}|:))\") + ')(%[0-9a-zA-Z-.:]{1,})?$');\nexport default function isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  assertString(str);\n  version = String(version);\n\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  }\n\n  if (version === '4') {\n    if (!IPv4AddressRegExp.test(str)) {\n      return false;\n    }\n\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  }\n\n  if (version === '6') {\n    return !!IPv6AddressRegExp.test(str);\n  }\n\n  return false;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}