{"ast":null,"code":"import { transformPropOrder } from './transform.mjs';\nconst translateAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\",\n  transformPerspective: \"perspective\"\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(transform, _ref, transformIsDefault, transformTemplate) {\n  let {\n    enableHardwareAcceleration = true,\n    allowTransformNone = true\n  } = _ref;\n  // The transform string we're going to build into.\n  let transformString = \"\";\n  /**\n   * Loop over all possible transforms in order, adding the ones that\n   * are present to the transform string.\n   */\n  for (let i = 0; i < numTransforms; i++) {\n    const key = transformPropOrder[i];\n    if (transform[key] !== undefined) {\n      const transformName = translateAlias[key] || key;\n      transformString += `${transformName}(${transform[key]}) `;\n    }\n  }\n  if (enableHardwareAcceleration && !transform.z) {\n    transformString += \"translateZ(0)\";\n  }\n  transformString = transformString.trim();\n  // If we have a custom `transform` template, pass our transform values and\n  // generated transformString to that before returning\n  if (transformTemplate) {\n    transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n  } else if (allowTransformNone && transformIsDefault) {\n    transformString = \"none\";\n  }\n  return transformString;\n}\nexport { buildTransform };","map":{"version":3,"names":["transformPropOrder","translateAlias","x","y","z","transformPerspective","numTransforms","length","buildTransform","transform","transformIsDefault","transformTemplate","enableHardwareAcceleration","allowTransformNone","transformString","i","key","undefined","transformName","trim"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        if (transform[key] !== undefined) {\n            const transformName = translateAlias[key] || key;\n            transformString += `${transformName}(${transform[key]}) `;\n        }\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,iBAAiB;AAEpD,MAAMC,cAAc,GAAG;EACnBC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,oBAAoB,EAAE;AAC1B,CAAC;AACD,MAAMC,aAAa,GAAGN,kBAAkB,CAACO,MAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAACC,SAAS,QAAqEC,kBAAkB,EAAEC,iBAAiB,EAAE;EAAA,IAA1G;IAAEC,0BAA0B,GAAG,IAAI;IAAEC,kBAAkB,GAAG;EAAM,CAAC;EAChG;EACA,IAAIC,eAAe,GAAG,EAAE;EACxB;AACJ;AACA;AACA;EACI,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,aAAa,EAAES,CAAC,EAAE,EAAE;IACpC,MAAMC,GAAG,GAAGhB,kBAAkB,CAACe,CAAC,CAAC;IACjC,IAAIN,SAAS,CAACO,GAAG,CAAC,KAAKC,SAAS,EAAE;MAC9B,MAAMC,aAAa,GAAGjB,cAAc,CAACe,GAAG,CAAC,IAAIA,GAAG;MAChDF,eAAe,IAAK,GAAEI,aAAc,IAAGT,SAAS,CAACO,GAAG,CAAE,IAAG;IAC7D;EACJ;EACA,IAAIJ,0BAA0B,IAAI,CAACH,SAAS,CAACL,CAAC,EAAE;IAC5CU,eAAe,IAAI,eAAe;EACtC;EACAA,eAAe,GAAGA,eAAe,CAACK,IAAI,EAAE;EACxC;EACA;EACA,IAAIR,iBAAiB,EAAE;IACnBG,eAAe,GAAGH,iBAAiB,CAACF,SAAS,EAAEC,kBAAkB,GAAG,EAAE,GAAGI,eAAe,CAAC;EAC7F,CAAC,MACI,IAAID,kBAAkB,IAAIH,kBAAkB,EAAE;IAC/CI,eAAe,GAAG,MAAM;EAC5B;EACA,OAAOA,eAAe;AAC1B;AAEA,SAASN,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}