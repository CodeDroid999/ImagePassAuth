{"ast":null,"code":"import assertString from './util/assertString';\nimport merge from './util/merge';\nvar default_fqdn_options = {\n  require_tld: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_numeric_tld: false,\n  allow_wildcard: false\n};\nexport default function isFQDN(str, options) {\n  assertString(str);\n  options = merge(options, default_fqdn_options);\n  /* Remove the optional trailing dot before checking validity */\n\n  if (options.allow_trailing_dot && str[str.length - 1] === '.') {\n    str = str.substring(0, str.length - 1);\n  }\n  /* Remove the optional wildcard before checking validity */\n\n  if (options.allow_wildcard === true && str.indexOf('*.') === 0) {\n    str = str.substring(2);\n  }\n  var parts = str.split('.');\n  var tld = parts[parts.length - 1];\n  if (options.require_tld) {\n    // disallow fqdns without tld\n    if (parts.length < 2) {\n      return false;\n    }\n    if (!/^([a-z\\u00A1-\\u00A8\\u00AA-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {\n      return false;\n    } // disallow spaces\n\n    if (/\\s/.test(tld)) {\n      return false;\n    }\n  } // reject numeric TLDs\n\n  if (!options.allow_numeric_tld && /^\\d+$/.test(tld)) {\n    return false;\n  }\n  return parts.every(function (part) {\n    if (part.length > 63) {\n      return false;\n    }\n    if (!/^[a-z_\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n      return false;\n    } // disallow full-width chars\n\n    if (/[\\uff01-\\uff5e]/.test(part)) {\n      return false;\n    } // disallow parts starting or ending with hyphen\n\n    if (/^-|-$/.test(part)) {\n      return false;\n    }\n    if (!options.allow_underscores && /_/.test(part)) {\n      return false;\n    }\n    return true;\n  });\n}","map":{"version":3,"names":["assertString","merge","default_fqdn_options","require_tld","allow_underscores","allow_trailing_dot","allow_numeric_tld","allow_wildcard","isFQDN","str","options","length","substring","indexOf","parts","split","tld","test","every","part"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/validator/es/lib/isFQDN.js"],"sourcesContent":["import assertString from './util/assertString';\nimport merge from './util/merge';\nvar default_fqdn_options = {\n  require_tld: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_numeric_tld: false,\n  allow_wildcard: false\n};\nexport default function isFQDN(str, options) {\n  assertString(str);\n  options = merge(options, default_fqdn_options);\n  /* Remove the optional trailing dot before checking validity */\n\n  if (options.allow_trailing_dot && str[str.length - 1] === '.') {\n    str = str.substring(0, str.length - 1);\n  }\n  /* Remove the optional wildcard before checking validity */\n\n\n  if (options.allow_wildcard === true && str.indexOf('*.') === 0) {\n    str = str.substring(2);\n  }\n\n  var parts = str.split('.');\n  var tld = parts[parts.length - 1];\n\n  if (options.require_tld) {\n    // disallow fqdns without tld\n    if (parts.length < 2) {\n      return false;\n    }\n\n    if (!/^([a-z\\u00A1-\\u00A8\\u00AA-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {\n      return false;\n    } // disallow spaces\n\n\n    if (/\\s/.test(tld)) {\n      return false;\n    }\n  } // reject numeric TLDs\n\n\n  if (!options.allow_numeric_tld && /^\\d+$/.test(tld)) {\n    return false;\n  }\n\n  return parts.every(function (part) {\n    if (part.length > 63) {\n      return false;\n    }\n\n    if (!/^[a-z_\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n      return false;\n    } // disallow full-width chars\n\n\n    if (/[\\uff01-\\uff5e]/.test(part)) {\n      return false;\n    } // disallow parts starting or ending with hyphen\n\n\n    if (/^-|-$/.test(part)) {\n      return false;\n    }\n\n    if (!options.allow_underscores && /_/.test(part)) {\n      return false;\n    }\n\n    return true;\n  });\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,KAAK,MAAM,cAAc;AAChC,IAAIC,oBAAoB,GAAG;EACzBC,WAAW,EAAE,IAAI;EACjBC,iBAAiB,EAAE,KAAK;EACxBC,kBAAkB,EAAE,KAAK;EACzBC,iBAAiB,EAAE,KAAK;EACxBC,cAAc,EAAE;AAClB,CAAC;AACD,eAAe,SAASC,MAAM,CAACC,GAAG,EAAEC,OAAO,EAAE;EAC3CV,YAAY,CAACS,GAAG,CAAC;EACjBC,OAAO,GAAGT,KAAK,CAACS,OAAO,EAAER,oBAAoB,CAAC;EAC9C;;EAEA,IAAIQ,OAAO,CAACL,kBAAkB,IAAII,GAAG,CAACA,GAAG,CAACE,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;IAC7DF,GAAG,GAAGA,GAAG,CAACG,SAAS,CAAC,CAAC,EAAEH,GAAG,CAACE,MAAM,GAAG,CAAC,CAAC;EACxC;EACA;;EAGA,IAAID,OAAO,CAACH,cAAc,KAAK,IAAI,IAAIE,GAAG,CAACI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;IAC9DJ,GAAG,GAAGA,GAAG,CAACG,SAAS,CAAC,CAAC,CAAC;EACxB;EAEA,IAAIE,KAAK,GAAGL,GAAG,CAACM,KAAK,CAAC,GAAG,CAAC;EAC1B,IAAIC,GAAG,GAAGF,KAAK,CAACA,KAAK,CAACH,MAAM,GAAG,CAAC,CAAC;EAEjC,IAAID,OAAO,CAACP,WAAW,EAAE;IACvB;IACA,IAAIW,KAAK,CAACH,MAAM,GAAG,CAAC,EAAE;MACpB,OAAO,KAAK;IACd;IAEA,IAAI,CAAC,oFAAoF,CAACM,IAAI,CAACD,GAAG,CAAC,EAAE;MACnG,OAAO,KAAK;IACd,CAAC,CAAC;;IAGF,IAAI,IAAI,CAACC,IAAI,CAACD,GAAG,CAAC,EAAE;MAClB,OAAO,KAAK;IACd;EACF,CAAC,CAAC;;EAGF,IAAI,CAACN,OAAO,CAACJ,iBAAiB,IAAI,OAAO,CAACW,IAAI,CAACD,GAAG,CAAC,EAAE;IACnD,OAAO,KAAK;EACd;EAEA,OAAOF,KAAK,CAACI,KAAK,CAAC,UAAUC,IAAI,EAAE;IACjC,IAAIA,IAAI,CAACR,MAAM,GAAG,EAAE,EAAE;MACpB,OAAO,KAAK;IACd;IAEA,IAAI,CAAC,6BAA6B,CAACM,IAAI,CAACE,IAAI,CAAC,EAAE;MAC7C,OAAO,KAAK;IACd,CAAC,CAAC;;IAGF,IAAI,iBAAiB,CAACF,IAAI,CAACE,IAAI,CAAC,EAAE;MAChC,OAAO,KAAK;IACd,CAAC,CAAC;;IAGF,IAAI,OAAO,CAACF,IAAI,CAACE,IAAI,CAAC,EAAE;MACtB,OAAO,KAAK;IACd;IAEA,IAAI,CAACT,OAAO,CAACN,iBAAiB,IAAI,GAAG,CAACa,IAAI,CAACE,IAAI,CAAC,EAAE;MAChD,OAAO,KAAK;IACd;IAEA,OAAO,IAAI;EACb,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}