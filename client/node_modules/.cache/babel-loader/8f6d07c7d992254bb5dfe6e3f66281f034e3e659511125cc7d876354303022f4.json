{"ast":null,"code":"import assertString from './util/assertString';\nvar isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/; // this link details how the check digit is calculated:\n// https://www.isin.org/isin-format/. it is a little bit\n// odd in that it works with digits, not numbers. in order\n// to make only one pass through the ISIN characters, the\n// each alpha character is handled as 2 characters within\n// the loop.\n\nexport default function isISIN(str) {\n  assertString(str);\n  if (!isin.test(str)) {\n    return false;\n  }\n  var _double = true;\n  var sum = 0; // convert values\n\n  for (var i = str.length - 2; i >= 0; i--) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      var value = str[i].charCodeAt(0) - 55;\n      var lo = value % 10;\n      var hi = Math.trunc(value / 10); // letters have two digits, so handle the low order\n      // and high order digits separately.\n\n      for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {\n        var digit = _arr[_i];\n        if (_double) {\n          if (digit >= 5) {\n            sum += 1 + (digit - 5) * 2;\n          } else {\n            sum += digit * 2;\n          }\n        } else {\n          sum += digit;\n        }\n        _double = !_double;\n      }\n    } else {\n      var _digit = str[i].charCodeAt(0) - '0'.charCodeAt(0);\n      if (_double) {\n        if (_digit >= 5) {\n          sum += 1 + (_digit - 5) * 2;\n        } else {\n          sum += _digit * 2;\n        }\n      } else {\n        sum += _digit;\n      }\n      _double = !_double;\n    }\n  }\n  var check = Math.trunc((sum + 9) / 10) * 10 - sum;\n  return +str[str.length - 1] === check;\n}","map":{"version":3,"names":["assertString","isin","isISIN","str","test","_double","sum","i","length","value","charCodeAt","lo","hi","Math","trunc","_i","_arr","digit","_digit","check"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/validator/es/lib/isISIN.js"],"sourcesContent":["import assertString from './util/assertString';\nvar isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/; // this link details how the check digit is calculated:\n// https://www.isin.org/isin-format/. it is a little bit\n// odd in that it works with digits, not numbers. in order\n// to make only one pass through the ISIN characters, the\n// each alpha character is handled as 2 characters within\n// the loop.\n\nexport default function isISIN(str) {\n  assertString(str);\n\n  if (!isin.test(str)) {\n    return false;\n  }\n\n  var _double = true;\n  var sum = 0; // convert values\n\n  for (var i = str.length - 2; i >= 0; i--) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      var value = str[i].charCodeAt(0) - 55;\n      var lo = value % 10;\n      var hi = Math.trunc(value / 10); // letters have two digits, so handle the low order\n      // and high order digits separately.\n\n      for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {\n        var digit = _arr[_i];\n\n        if (_double) {\n          if (digit >= 5) {\n            sum += 1 + (digit - 5) * 2;\n          } else {\n            sum += digit * 2;\n          }\n        } else {\n          sum += digit;\n        }\n\n        _double = !_double;\n      }\n    } else {\n      var _digit = str[i].charCodeAt(0) - '0'.charCodeAt(0);\n\n      if (_double) {\n        if (_digit >= 5) {\n          sum += 1 + (_digit - 5) * 2;\n        } else {\n          sum += _digit * 2;\n        }\n      } else {\n        sum += _digit;\n      }\n\n      _double = !_double;\n    }\n  }\n\n  var check = Math.trunc((sum + 9) / 10) * 10 - sum;\n  return +str[str.length - 1] === check;\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,qBAAqB;AAC9C,IAAIC,IAAI,GAAG,4BAA4B,CAAC,CAAC;AACzC;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,MAAM,CAACC,GAAG,EAAE;EAClCH,YAAY,CAACG,GAAG,CAAC;EAEjB,IAAI,CAACF,IAAI,CAACG,IAAI,CAACD,GAAG,CAAC,EAAE;IACnB,OAAO,KAAK;EACd;EAEA,IAAIE,OAAO,GAAG,IAAI;EAClB,IAAIC,GAAG,GAAG,CAAC,CAAC,CAAC;;EAEb,KAAK,IAAIC,CAAC,GAAGJ,GAAG,CAACK,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxC,IAAIJ,GAAG,CAACI,CAAC,CAAC,IAAI,GAAG,IAAIJ,GAAG,CAACI,CAAC,CAAC,IAAI,GAAG,EAAE;MAClC,IAAIE,KAAK,GAAGN,GAAG,CAACI,CAAC,CAAC,CAACG,UAAU,CAAC,CAAC,CAAC,GAAG,EAAE;MACrC,IAAIC,EAAE,GAAGF,KAAK,GAAG,EAAE;MACnB,IAAIG,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACL,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC;MACjC;;MAEA,KAAK,IAAIM,EAAE,GAAG,CAAC,EAAEC,IAAI,GAAG,CAACL,EAAE,EAAEC,EAAE,CAAC,EAAEG,EAAE,GAAGC,IAAI,CAACR,MAAM,EAAEO,EAAE,EAAE,EAAE;QACxD,IAAIE,KAAK,GAAGD,IAAI,CAACD,EAAE,CAAC;QAEpB,IAAIV,OAAO,EAAE;UACX,IAAIY,KAAK,IAAI,CAAC,EAAE;YACdX,GAAG,IAAI,CAAC,GAAG,CAACW,KAAK,GAAG,CAAC,IAAI,CAAC;UAC5B,CAAC,MAAM;YACLX,GAAG,IAAIW,KAAK,GAAG,CAAC;UAClB;QACF,CAAC,MAAM;UACLX,GAAG,IAAIW,KAAK;QACd;QAEAZ,OAAO,GAAG,CAACA,OAAO;MACpB;IACF,CAAC,MAAM;MACL,IAAIa,MAAM,GAAGf,GAAG,CAACI,CAAC,CAAC,CAACG,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,CAACA,UAAU,CAAC,CAAC,CAAC;MAErD,IAAIL,OAAO,EAAE;QACX,IAAIa,MAAM,IAAI,CAAC,EAAE;UACfZ,GAAG,IAAI,CAAC,GAAG,CAACY,MAAM,GAAG,CAAC,IAAI,CAAC;QAC7B,CAAC,MAAM;UACLZ,GAAG,IAAIY,MAAM,GAAG,CAAC;QACnB;MACF,CAAC,MAAM;QACLZ,GAAG,IAAIY,MAAM;MACf;MAEAb,OAAO,GAAG,CAACA,OAAO;IACpB;EACF;EAEA,IAAIc,KAAK,GAAGN,IAAI,CAACC,KAAK,CAAC,CAACR,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,GAAGA,GAAG;EACjD,OAAO,CAACH,GAAG,CAACA,GAAG,CAACK,MAAM,GAAG,CAAC,CAAC,KAAKW,KAAK;AACvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}