{"ast":null,"code":"import assertString from './util/assertString';\nvar _int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\nvar intLeadingZeroes = /^[-+]?[0-9]+$/;\nexport default function isInt(str, options) {\n  assertString(str);\n  options = options || {}; // Get the regex to use for testing, based on whether\n  // leading zeroes are allowed or not.\n\n  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? _int : intLeadingZeroes; // Check min/max/lt/gt\n\n  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;\n  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;\n  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;\n  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\n}","map":{"version":3,"names":["assertString","_int","intLeadingZeroes","isInt","str","options","regex","hasOwnProperty","allow_leading_zeroes","minCheckPassed","min","maxCheckPassed","max","ltCheckPassed","lt","gtCheckPassed","gt","test"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/validator/es/lib/isInt.js"],"sourcesContent":["import assertString from './util/assertString';\nvar _int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\nvar intLeadingZeroes = /^[-+]?[0-9]+$/;\nexport default function isInt(str, options) {\n  assertString(str);\n  options = options || {}; // Get the regex to use for testing, based on whether\n  // leading zeroes are allowed or not.\n\n  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? _int : intLeadingZeroes; // Check min/max/lt/gt\n\n  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;\n  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;\n  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;\n  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,qBAAqB;AAC9C,IAAIC,IAAI,GAAG,8BAA8B;AACzC,IAAIC,gBAAgB,GAAG,eAAe;AACtC,eAAe,SAASC,KAAK,CAACC,GAAG,EAAEC,OAAO,EAAE;EAC1CL,YAAY,CAACI,GAAG,CAAC;EACjBC,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;EACzB;;EAEA,IAAIC,KAAK,GAAGD,OAAO,CAACE,cAAc,CAAC,sBAAsB,CAAC,IAAI,CAACF,OAAO,CAACG,oBAAoB,GAAGP,IAAI,GAAGC,gBAAgB,CAAC,CAAC;;EAEvH,IAAIO,cAAc,GAAG,CAACJ,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,IAAIH,GAAG,IAAIC,OAAO,CAACK,GAAG;EACzE,IAAIC,cAAc,GAAG,CAACN,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,IAAIH,GAAG,IAAIC,OAAO,CAACO,GAAG;EACzE,IAAIC,aAAa,GAAG,CAACR,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,IAAIH,GAAG,GAAGC,OAAO,CAACS,EAAE;EACrE,IAAIC,aAAa,GAAG,CAACV,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,IAAIH,GAAG,GAAGC,OAAO,CAACW,EAAE;EACrE,OAAOV,KAAK,CAACW,IAAI,CAACb,GAAG,CAAC,IAAIK,cAAc,IAAIE,cAAc,IAAIE,aAAa,IAAIE,aAAa;AAC9F"},"metadata":{},"sourceType":"module","externalDependencies":[]}