{"ast":null,"code":"import assertString from './util/assertString';\nimport isIP from './isIP';\nvar subnetMaybe = /^\\d{1,3}$/;\nvar v4Subnet = 32;\nvar v6Subnet = 128;\nexport default function isIPRange(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  assertString(str);\n  var parts = str.split('/'); // parts[0] -> ip, parts[1] -> subnet\n\n  if (parts.length !== 2) {\n    return false;\n  }\n  if (!subnetMaybe.test(parts[1])) {\n    return false;\n  } // Disallow preceding 0 i.e. 01, 02, ...\n\n  if (parts[1].length > 1 && parts[1].startsWith('0')) {\n    return false;\n  }\n  var isValidIP = isIP(parts[0], version);\n  if (!isValidIP) {\n    return false;\n  } // Define valid subnet according to IP's version\n\n  var expectedSubnet = null;\n  switch (String(version)) {\n    case '4':\n      expectedSubnet = v4Subnet;\n      break;\n    case '6':\n      expectedSubnet = v6Subnet;\n      break;\n    default:\n      expectedSubnet = isIP(parts[0], '6') ? v6Subnet : v4Subnet;\n  }\n  return parts[1] <= expectedSubnet && parts[1] >= 0;\n}","map":{"version":3,"names":["assertString","isIP","subnetMaybe","v4Subnet","v6Subnet","isIPRange","str","version","arguments","length","undefined","parts","split","test","startsWith","isValidIP","expectedSubnet","String"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/validator/es/lib/isIPRange.js"],"sourcesContent":["import assertString from './util/assertString';\nimport isIP from './isIP';\nvar subnetMaybe = /^\\d{1,3}$/;\nvar v4Subnet = 32;\nvar v6Subnet = 128;\nexport default function isIPRange(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  assertString(str);\n  var parts = str.split('/'); // parts[0] -> ip, parts[1] -> subnet\n\n  if (parts.length !== 2) {\n    return false;\n  }\n\n  if (!subnetMaybe.test(parts[1])) {\n    return false;\n  } // Disallow preceding 0 i.e. 01, 02, ...\n\n\n  if (parts[1].length > 1 && parts[1].startsWith('0')) {\n    return false;\n  }\n\n  var isValidIP = isIP(parts[0], version);\n\n  if (!isValidIP) {\n    return false;\n  } // Define valid subnet according to IP's version\n\n\n  var expectedSubnet = null;\n\n  switch (String(version)) {\n    case '4':\n      expectedSubnet = v4Subnet;\n      break;\n\n    case '6':\n      expectedSubnet = v6Subnet;\n      break;\n\n    default:\n      expectedSubnet = isIP(parts[0], '6') ? v6Subnet : v4Subnet;\n  }\n\n  return parts[1] <= expectedSubnet && parts[1] >= 0;\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,IAAI,MAAM,QAAQ;AACzB,IAAIC,WAAW,GAAG,WAAW;AAC7B,IAAIC,QAAQ,GAAG,EAAE;AACjB,IAAIC,QAAQ,GAAG,GAAG;AAClB,eAAe,SAASC,SAAS,CAACC,GAAG,EAAE;EACrC,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;EACpFR,YAAY,CAACM,GAAG,CAAC;EACjB,IAAIK,KAAK,GAAGL,GAAG,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;EAE5B,IAAID,KAAK,CAACF,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO,KAAK;EACd;EAEA,IAAI,CAACP,WAAW,CAACW,IAAI,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;IAC/B,OAAO,KAAK;EACd,CAAC,CAAC;;EAGF,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACF,MAAM,GAAG,CAAC,IAAIE,KAAK,CAAC,CAAC,CAAC,CAACG,UAAU,CAAC,GAAG,CAAC,EAAE;IACnD,OAAO,KAAK;EACd;EAEA,IAAIC,SAAS,GAAGd,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC,EAAEJ,OAAO,CAAC;EAEvC,IAAI,CAACQ,SAAS,EAAE;IACd,OAAO,KAAK;EACd,CAAC,CAAC;;EAGF,IAAIC,cAAc,GAAG,IAAI;EAEzB,QAAQC,MAAM,CAACV,OAAO,CAAC;IACrB,KAAK,GAAG;MACNS,cAAc,GAAGb,QAAQ;MACzB;IAEF,KAAK,GAAG;MACNa,cAAc,GAAGZ,QAAQ;MACzB;IAEF;MACEY,cAAc,GAAGf,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAGP,QAAQ,GAAGD,QAAQ;EAAC;EAG/D,OAAOQ,KAAK,CAAC,CAAC,CAAC,IAAIK,cAAc,IAAIL,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;AACpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}