{"ast":null,"code":"import assertString from './util/assertString'; // common patterns\n\nvar threeDigit = /^\\d{3}$/;\nvar fourDigit = /^\\d{4}$/;\nvar fiveDigit = /^\\d{5}$/;\nvar sixDigit = /^\\d{6}$/;\nvar patterns = {\n  AD: /^AD\\d{3}$/,\n  AT: fourDigit,\n  AU: fourDigit,\n  AZ: /^AZ\\d{4}$/,\n  BE: fourDigit,\n  BG: fourDigit,\n  BR: /^\\d{5}-\\d{3}$/,\n  BY: /2[1-4]{1}\\d{4}$/,\n  CA: /^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJ-NPRSTV-Z][\\s\\-]?\\d[ABCEGHJ-NPRSTV-Z]\\d$/i,\n  CH: fourDigit,\n  CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\\d{4}$/,\n  CZ: /^\\d{3}\\s?\\d{2}$/,\n  DE: fiveDigit,\n  DK: fourDigit,\n  DO: fiveDigit,\n  DZ: fiveDigit,\n  EE: fiveDigit,\n  ES: /^(5[0-2]{1}|[0-4]{1}\\d{1})\\d{3}$/,\n  FI: fiveDigit,\n  FR: /^\\d{2}\\s?\\d{3}$/,\n  GB: /^(gir\\s?0aa|[a-z]{1,2}\\d[\\da-z]?\\s?(\\d[a-z]{2})?)$/i,\n  GR: /^\\d{3}\\s?\\d{2}$/,\n  HR: /^([1-5]\\d{4}$)/,\n  HT: /^HT\\d{4}$/,\n  HU: fourDigit,\n  ID: fiveDigit,\n  IE: /^(?!.*(?:o))[A-Za-z]\\d[\\dw]\\s\\w{4}$/i,\n  IL: /^(\\d{5}|\\d{7})$/,\n  IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,\n  IR: /\\b(?!(\\d)\\1{3})[13-9]{4}[1346-9][013-9]{5}\\b/,\n  IS: threeDigit,\n  IT: fiveDigit,\n  JP: /^\\d{3}\\-\\d{4}$/,\n  KE: fiveDigit,\n  KR: /^(\\d{5}|\\d{6})$/,\n  LI: /^(948[5-9]|949[0-7])$/,\n  LT: /^LT\\-\\d{5}$/,\n  LU: fourDigit,\n  LV: /^LV\\-\\d{4}$/,\n  LK: fiveDigit,\n  MX: fiveDigit,\n  MT: /^[A-Za-z]{3}\\s{0,1}\\d{4}$/,\n  MY: fiveDigit,\n  NL: /^\\d{4}\\s?[a-z]{2}$/i,\n  NO: fourDigit,\n  NP: /^(10|21|22|32|33|34|44|45|56|57)\\d{3}$|^(977)$/i,\n  NZ: fourDigit,\n  PL: /^\\d{2}\\-\\d{3}$/,\n  PR: /^00[679]\\d{2}([ -]\\d{4})?$/,\n  PT: /^\\d{4}\\-\\d{3}?$/,\n  RO: sixDigit,\n  RU: sixDigit,\n  SA: fiveDigit,\n  SE: /^[1-9]\\d{2}\\s?\\d{2}$/,\n  SG: sixDigit,\n  SI: fourDigit,\n  SK: /^\\d{3}\\s?\\d{2}$/,\n  TH: fiveDigit,\n  TN: fourDigit,\n  TW: /^\\d{3}(\\d{2})?$/,\n  UA: fiveDigit,\n  US: /^\\d{5}(-\\d{4})?$/,\n  ZA: fourDigit,\n  ZM: fiveDigit\n};\nexport var locales = Object.keys(patterns);\nexport default function isPostalCode(str, locale) {\n  assertString(str);\n  if (locale in patterns) {\n    return patterns[locale].test(str);\n  } else if (locale === 'any') {\n    for (var key in patterns) {\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n      // istanbul ignore else\n      if (patterns.hasOwnProperty(key)) {\n        var pattern = patterns[key];\n        if (pattern.test(str)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}","map":{"version":3,"names":["assertString","threeDigit","fourDigit","fiveDigit","sixDigit","patterns","AD","AT","AU","AZ","BE","BG","BR","BY","CA","CH","CN","CZ","DE","DK","DO","DZ","EE","ES","FI","FR","GB","GR","HR","HT","HU","ID","IE","IL","IN","IR","IS","IT","JP","KE","KR","LI","LT","LU","LV","LK","MX","MT","MY","NL","NO","NP","NZ","PL","PR","PT","RO","RU","SA","SE","SG","SI","SK","TH","TN","TW","UA","US","ZA","ZM","locales","Object","keys","isPostalCode","str","locale","test","key","hasOwnProperty","pattern","Error","concat"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/validator/es/lib/isPostalCode.js"],"sourcesContent":["import assertString from './util/assertString'; // common patterns\n\nvar threeDigit = /^\\d{3}$/;\nvar fourDigit = /^\\d{4}$/;\nvar fiveDigit = /^\\d{5}$/;\nvar sixDigit = /^\\d{6}$/;\nvar patterns = {\n  AD: /^AD\\d{3}$/,\n  AT: fourDigit,\n  AU: fourDigit,\n  AZ: /^AZ\\d{4}$/,\n  BE: fourDigit,\n  BG: fourDigit,\n  BR: /^\\d{5}-\\d{3}$/,\n  BY: /2[1-4]{1}\\d{4}$/,\n  CA: /^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJ-NPRSTV-Z][\\s\\-]?\\d[ABCEGHJ-NPRSTV-Z]\\d$/i,\n  CH: fourDigit,\n  CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\\d{4}$/,\n  CZ: /^\\d{3}\\s?\\d{2}$/,\n  DE: fiveDigit,\n  DK: fourDigit,\n  DO: fiveDigit,\n  DZ: fiveDigit,\n  EE: fiveDigit,\n  ES: /^(5[0-2]{1}|[0-4]{1}\\d{1})\\d{3}$/,\n  FI: fiveDigit,\n  FR: /^\\d{2}\\s?\\d{3}$/,\n  GB: /^(gir\\s?0aa|[a-z]{1,2}\\d[\\da-z]?\\s?(\\d[a-z]{2})?)$/i,\n  GR: /^\\d{3}\\s?\\d{2}$/,\n  HR: /^([1-5]\\d{4}$)/,\n  HT: /^HT\\d{4}$/,\n  HU: fourDigit,\n  ID: fiveDigit,\n  IE: /^(?!.*(?:o))[A-Za-z]\\d[\\dw]\\s\\w{4}$/i,\n  IL: /^(\\d{5}|\\d{7})$/,\n  IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,\n  IR: /\\b(?!(\\d)\\1{3})[13-9]{4}[1346-9][013-9]{5}\\b/,\n  IS: threeDigit,\n  IT: fiveDigit,\n  JP: /^\\d{3}\\-\\d{4}$/,\n  KE: fiveDigit,\n  KR: /^(\\d{5}|\\d{6})$/,\n  LI: /^(948[5-9]|949[0-7])$/,\n  LT: /^LT\\-\\d{5}$/,\n  LU: fourDigit,\n  LV: /^LV\\-\\d{4}$/,\n  LK: fiveDigit,\n  MX: fiveDigit,\n  MT: /^[A-Za-z]{3}\\s{0,1}\\d{4}$/,\n  MY: fiveDigit,\n  NL: /^\\d{4}\\s?[a-z]{2}$/i,\n  NO: fourDigit,\n  NP: /^(10|21|22|32|33|34|44|45|56|57)\\d{3}$|^(977)$/i,\n  NZ: fourDigit,\n  PL: /^\\d{2}\\-\\d{3}$/,\n  PR: /^00[679]\\d{2}([ -]\\d{4})?$/,\n  PT: /^\\d{4}\\-\\d{3}?$/,\n  RO: sixDigit,\n  RU: sixDigit,\n  SA: fiveDigit,\n  SE: /^[1-9]\\d{2}\\s?\\d{2}$/,\n  SG: sixDigit,\n  SI: fourDigit,\n  SK: /^\\d{3}\\s?\\d{2}$/,\n  TH: fiveDigit,\n  TN: fourDigit,\n  TW: /^\\d{3}(\\d{2})?$/,\n  UA: fiveDigit,\n  US: /^\\d{5}(-\\d{4})?$/,\n  ZA: fourDigit,\n  ZM: fiveDigit\n};\nexport var locales = Object.keys(patterns);\nexport default function isPostalCode(str, locale) {\n  assertString(str);\n\n  if (locale in patterns) {\n    return patterns[locale].test(str);\n  } else if (locale === 'any') {\n    for (var key in patterns) {\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n      // istanbul ignore else\n      if (patterns.hasOwnProperty(key)) {\n        var pattern = patterns[key];\n\n        if (pattern.test(str)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}