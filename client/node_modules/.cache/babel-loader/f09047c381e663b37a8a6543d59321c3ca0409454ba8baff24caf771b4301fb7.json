{"ast":null,"code":"import merge from './util/merge';\nimport assertString from './util/assertString';\nvar upperCaseRegex = /^[A-Z]$/;\nvar lowerCaseRegex = /^[a-z]$/;\nvar numberRegex = /^[0-9]$/;\nvar symbolRegex = /^[-#!$@%^&*()_+|~=`{}\\[\\]:\";'<>?,.\\/ ]$/;\nvar defaultOptions = {\n  minLength: 8,\n  minLowercase: 1,\n  minUppercase: 1,\n  minNumbers: 1,\n  minSymbols: 1,\n  returnScore: false,\n  pointsPerUnique: 1,\n  pointsPerRepeat: 0.5,\n  pointsForContainingLower: 10,\n  pointsForContainingUpper: 10,\n  pointsForContainingNumber: 10,\n  pointsForContainingSymbol: 10\n};\n/* Counts number of occurrences of each char in a string\n * could be moved to util/ ?\n*/\n\nfunction countChars(str) {\n  var result = {};\n  Array.from(str).forEach(function (_char) {\n    var curVal = result[_char];\n    if (curVal) {\n      result[_char] += 1;\n    } else {\n      result[_char] = 1;\n    }\n  });\n  return result;\n}\n/* Return information about a password */\n\nfunction analyzePassword(password) {\n  var charMap = countChars(password);\n  var analysis = {\n    length: password.length,\n    uniqueChars: Object.keys(charMap).length,\n    uppercaseCount: 0,\n    lowercaseCount: 0,\n    numberCount: 0,\n    symbolCount: 0\n  };\n  Object.keys(charMap).forEach(function (_char2) {\n    /* istanbul ignore else */\n    if (upperCaseRegex.test(_char2)) {\n      analysis.uppercaseCount += charMap[_char2];\n    } else if (lowerCaseRegex.test(_char2)) {\n      analysis.lowercaseCount += charMap[_char2];\n    } else if (numberRegex.test(_char2)) {\n      analysis.numberCount += charMap[_char2];\n    } else if (symbolRegex.test(_char2)) {\n      analysis.symbolCount += charMap[_char2];\n    }\n  });\n  return analysis;\n}\nfunction scorePassword(analysis, scoringOptions) {\n  var points = 0;\n  points += analysis.uniqueChars * scoringOptions.pointsPerUnique;\n  points += (analysis.length - analysis.uniqueChars) * scoringOptions.pointsPerRepeat;\n  if (analysis.lowercaseCount > 0) {\n    points += scoringOptions.pointsForContainingLower;\n  }\n  if (analysis.uppercaseCount > 0) {\n    points += scoringOptions.pointsForContainingUpper;\n  }\n  if (analysis.numberCount > 0) {\n    points += scoringOptions.pointsForContainingNumber;\n  }\n  if (analysis.symbolCount > 0) {\n    points += scoringOptions.pointsForContainingSymbol;\n  }\n  return points;\n}\nexport default function isStrongPassword(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  assertString(str);\n  var analysis = analyzePassword(str);\n  options = merge(options || {}, defaultOptions);\n  if (options.returnScore) {\n    return scorePassword(analysis, options);\n  }\n  return analysis.length >= options.minLength && analysis.lowercaseCount >= options.minLowercase && analysis.uppercaseCount >= options.minUppercase && analysis.numberCount >= options.minNumbers && analysis.symbolCount >= options.minSymbols;\n}","map":{"version":3,"names":["merge","assertString","upperCaseRegex","lowerCaseRegex","numberRegex","symbolRegex","defaultOptions","minLength","minLowercase","minUppercase","minNumbers","minSymbols","returnScore","pointsPerUnique","pointsPerRepeat","pointsForContainingLower","pointsForContainingUpper","pointsForContainingNumber","pointsForContainingSymbol","countChars","str","result","Array","from","forEach","_char","curVal","analyzePassword","password","charMap","analysis","length","uniqueChars","Object","keys","uppercaseCount","lowercaseCount","numberCount","symbolCount","_char2","test","scorePassword","scoringOptions","points","isStrongPassword","options","arguments","undefined"],"sources":["C:/Users/hp/Pictures/ImagePassAuth/client/node_modules/validator/es/lib/isStrongPassword.js"],"sourcesContent":["import merge from './util/merge';\nimport assertString from './util/assertString';\nvar upperCaseRegex = /^[A-Z]$/;\nvar lowerCaseRegex = /^[a-z]$/;\nvar numberRegex = /^[0-9]$/;\nvar symbolRegex = /^[-#!$@%^&*()_+|~=`{}\\[\\]:\";'<>?,.\\/ ]$/;\nvar defaultOptions = {\n  minLength: 8,\n  minLowercase: 1,\n  minUppercase: 1,\n  minNumbers: 1,\n  minSymbols: 1,\n  returnScore: false,\n  pointsPerUnique: 1,\n  pointsPerRepeat: 0.5,\n  pointsForContainingLower: 10,\n  pointsForContainingUpper: 10,\n  pointsForContainingNumber: 10,\n  pointsForContainingSymbol: 10\n};\n/* Counts number of occurrences of each char in a string\n * could be moved to util/ ?\n*/\n\nfunction countChars(str) {\n  var result = {};\n  Array.from(str).forEach(function (_char) {\n    var curVal = result[_char];\n\n    if (curVal) {\n      result[_char] += 1;\n    } else {\n      result[_char] = 1;\n    }\n  });\n  return result;\n}\n/* Return information about a password */\n\n\nfunction analyzePassword(password) {\n  var charMap = countChars(password);\n  var analysis = {\n    length: password.length,\n    uniqueChars: Object.keys(charMap).length,\n    uppercaseCount: 0,\n    lowercaseCount: 0,\n    numberCount: 0,\n    symbolCount: 0\n  };\n  Object.keys(charMap).forEach(function (_char2) {\n    /* istanbul ignore else */\n    if (upperCaseRegex.test(_char2)) {\n      analysis.uppercaseCount += charMap[_char2];\n    } else if (lowerCaseRegex.test(_char2)) {\n      analysis.lowercaseCount += charMap[_char2];\n    } else if (numberRegex.test(_char2)) {\n      analysis.numberCount += charMap[_char2];\n    } else if (symbolRegex.test(_char2)) {\n      analysis.symbolCount += charMap[_char2];\n    }\n  });\n  return analysis;\n}\n\nfunction scorePassword(analysis, scoringOptions) {\n  var points = 0;\n  points += analysis.uniqueChars * scoringOptions.pointsPerUnique;\n  points += (analysis.length - analysis.uniqueChars) * scoringOptions.pointsPerRepeat;\n\n  if (analysis.lowercaseCount > 0) {\n    points += scoringOptions.pointsForContainingLower;\n  }\n\n  if (analysis.uppercaseCount > 0) {\n    points += scoringOptions.pointsForContainingUpper;\n  }\n\n  if (analysis.numberCount > 0) {\n    points += scoringOptions.pointsForContainingNumber;\n  }\n\n  if (analysis.symbolCount > 0) {\n    points += scoringOptions.pointsForContainingSymbol;\n  }\n\n  return points;\n}\n\nexport default function isStrongPassword(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  assertString(str);\n  var analysis = analyzePassword(str);\n  options = merge(options || {}, defaultOptions);\n\n  if (options.returnScore) {\n    return scorePassword(analysis, options);\n  }\n\n  return analysis.length >= options.minLength && analysis.lowercaseCount >= options.minLowercase && analysis.uppercaseCount >= options.minUppercase && analysis.numberCount >= options.minNumbers && analysis.symbolCount >= options.minSymbols;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}